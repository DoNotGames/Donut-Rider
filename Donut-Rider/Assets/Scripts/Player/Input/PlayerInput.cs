//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Player/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Global"",
            ""id"": ""89c4807e-3996-4ba7-92e5-caf62b57354e"",
            ""actions"": [
                {
                    ""name"": ""SwitchTestInputs"",
                    ""type"": ""Button"",
                    ""id"": ""75c15c3d-906f-41cb-9adf-91ed95a664ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a3bb94d8-06cf-4252-96cb-e6ba8075e6d8"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchTestInputs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Tests"",
            ""id"": ""7c4536ac-cc5a-43b9-8290-c1bdf358769c"",
            ""actions"": [
                {
                    ""name"": ""TestMe"",
                    ""type"": ""Button"",
                    ""id"": ""3ce09ee9-1a44-41c2-919a-39db06821cf2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""76a32432-9037-4b40-8139-bf433a792219"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestMe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Global
        m_Global = asset.FindActionMap("Global", throwIfNotFound: true);
        m_Global_SwitchTestInputs = m_Global.FindAction("SwitchTestInputs", throwIfNotFound: true);
        // Tests
        m_Tests = asset.FindActionMap("Tests", throwIfNotFound: true);
        m_Tests_TestMe = m_Tests.FindAction("TestMe", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Global
    private readonly InputActionMap m_Global;
    private IGlobalActions m_GlobalActionsCallbackInterface;
    private readonly InputAction m_Global_SwitchTestInputs;
    public struct GlobalActions
    {
        private @PlayerInput m_Wrapper;
        public GlobalActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchTestInputs => m_Wrapper.m_Global_SwitchTestInputs;
        public InputActionMap Get() { return m_Wrapper.m_Global; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalActions set) { return set.Get(); }
        public void SetCallbacks(IGlobalActions instance)
        {
            if (m_Wrapper.m_GlobalActionsCallbackInterface != null)
            {
                @SwitchTestInputs.started -= m_Wrapper.m_GlobalActionsCallbackInterface.OnSwitchTestInputs;
                @SwitchTestInputs.performed -= m_Wrapper.m_GlobalActionsCallbackInterface.OnSwitchTestInputs;
                @SwitchTestInputs.canceled -= m_Wrapper.m_GlobalActionsCallbackInterface.OnSwitchTestInputs;
            }
            m_Wrapper.m_GlobalActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SwitchTestInputs.started += instance.OnSwitchTestInputs;
                @SwitchTestInputs.performed += instance.OnSwitchTestInputs;
                @SwitchTestInputs.canceled += instance.OnSwitchTestInputs;
            }
        }
    }
    public GlobalActions @Global => new GlobalActions(this);

    // Tests
    private readonly InputActionMap m_Tests;
    private ITestsActions m_TestsActionsCallbackInterface;
    private readonly InputAction m_Tests_TestMe;
    public struct TestsActions
    {
        private @PlayerInput m_Wrapper;
        public TestsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TestMe => m_Wrapper.m_Tests_TestMe;
        public InputActionMap Get() { return m_Wrapper.m_Tests; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestsActions set) { return set.Get(); }
        public void SetCallbacks(ITestsActions instance)
        {
            if (m_Wrapper.m_TestsActionsCallbackInterface != null)
            {
                @TestMe.started -= m_Wrapper.m_TestsActionsCallbackInterface.OnTestMe;
                @TestMe.performed -= m_Wrapper.m_TestsActionsCallbackInterface.OnTestMe;
                @TestMe.canceled -= m_Wrapper.m_TestsActionsCallbackInterface.OnTestMe;
            }
            m_Wrapper.m_TestsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TestMe.started += instance.OnTestMe;
                @TestMe.performed += instance.OnTestMe;
                @TestMe.canceled += instance.OnTestMe;
            }
        }
    }
    public TestsActions @Tests => new TestsActions(this);
    public interface IGlobalActions
    {
        void OnSwitchTestInputs(InputAction.CallbackContext context);
    }
    public interface ITestsActions
    {
        void OnTestMe(InputAction.CallbackContext context);
    }
}
